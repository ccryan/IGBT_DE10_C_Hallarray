#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1585240293

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'pulse_gpio_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PULSE_GPIO_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PULSE_GPIO_PIO_COMPONENT_TYPE altera_avalon_pio
#define PULSE_GPIO_PIO_COMPONENT_NAME pulse_gpio_pio
#define PULSE_GPIO_PIO_BASE 0x6000
#define PULSE_GPIO_PIO_SPAN 16
#define PULSE_GPIO_PIO_END 0x600f
#define PULSE_GPIO_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PULSE_GPIO_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PULSE_GPIO_PIO_CAPTURE 0
#define PULSE_GPIO_PIO_DATA_WIDTH 7
#define PULSE_GPIO_PIO_DO_TEST_BENCH_WIRING 0
#define PULSE_GPIO_PIO_DRIVEN_SIM_VALUE 0
#define PULSE_GPIO_PIO_EDGE_TYPE NONE
#define PULSE_GPIO_PIO_FREQ 50000000
#define PULSE_GPIO_PIO_HAS_IN 0
#define PULSE_GPIO_PIO_HAS_OUT 1
#define PULSE_GPIO_PIO_HAS_TRI 0
#define PULSE_GPIO_PIO_IRQ_TYPE NONE
#define PULSE_GPIO_PIO_RESET_VALUE 127

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff

/*
 * Macros for device 'ctrl_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'CTRL_OUT_'.
 * The prefix is the slave descriptor.
 */
#define CTRL_OUT_COMPONENT_TYPE altera_avalon_pio
#define CTRL_OUT_COMPONENT_NAME ctrl_out
#define CTRL_OUT_BASE 0x40000
#define CTRL_OUT_SPAN 16
#define CTRL_OUT_END 0x4000f
#define CTRL_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define CTRL_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define CTRL_OUT_CAPTURE 0
#define CTRL_OUT_DATA_WIDTH 32
#define CTRL_OUT_DO_TEST_BENCH_WIRING 0
#define CTRL_OUT_DRIVEN_SIM_VALUE 0
#define CTRL_OUT_EDGE_TYPE NONE
#define CTRL_OUT_FREQ 50000000
#define CTRL_OUT_HAS_IN 0
#define CTRL_OUT_HAS_OUT 1
#define CTRL_OUT_HAS_TRI 0
#define CTRL_OUT_IRQ_TYPE NONE
#define CTRL_OUT_RESET_VALUE 0

/*
 * Macros for device 'pulse_length_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PULSE_LENGTH_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PULSE_LENGTH_PIO_COMPONENT_TYPE altera_avalon_pio
#define PULSE_LENGTH_PIO_COMPONENT_NAME pulse_length_pio
#define PULSE_LENGTH_PIO_BASE 0x41000
#define PULSE_LENGTH_PIO_SPAN 16
#define PULSE_LENGTH_PIO_END 0x4100f
#define PULSE_LENGTH_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PULSE_LENGTH_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PULSE_LENGTH_PIO_CAPTURE 0
#define PULSE_LENGTH_PIO_DATA_WIDTH 32
#define PULSE_LENGTH_PIO_DO_TEST_BENCH_WIRING 0
#define PULSE_LENGTH_PIO_DRIVEN_SIM_VALUE 0
#define PULSE_LENGTH_PIO_EDGE_TYPE NONE
#define PULSE_LENGTH_PIO_FREQ 50000000
#define PULSE_LENGTH_PIO_HAS_IN 0
#define PULSE_LENGTH_PIO_HAS_OUT 1
#define PULSE_LENGTH_PIO_HAS_TRI 0
#define PULSE_LENGTH_PIO_IRQ_TYPE NONE
#define PULSE_LENGTH_PIO_RESET_VALUE 0

/*
 * Macros for device 'pulse_length_ch2_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PULSE_LENGTH_CH2_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PULSE_LENGTH_CH2_PIO_COMPONENT_TYPE altera_avalon_pio
#define PULSE_LENGTH_CH2_PIO_COMPONENT_NAME pulse_length_ch2_pio
#define PULSE_LENGTH_CH2_PIO_BASE 0x42000
#define PULSE_LENGTH_CH2_PIO_SPAN 16
#define PULSE_LENGTH_CH2_PIO_END 0x4200f
#define PULSE_LENGTH_CH2_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PULSE_LENGTH_CH2_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PULSE_LENGTH_CH2_PIO_CAPTURE 0
#define PULSE_LENGTH_CH2_PIO_DATA_WIDTH 32
#define PULSE_LENGTH_CH2_PIO_DO_TEST_BENCH_WIRING 0
#define PULSE_LENGTH_CH2_PIO_DRIVEN_SIM_VALUE 0
#define PULSE_LENGTH_CH2_PIO_EDGE_TYPE NONE
#define PULSE_LENGTH_CH2_PIO_FREQ 50000000
#define PULSE_LENGTH_CH2_PIO_HAS_IN 0
#define PULSE_LENGTH_CH2_PIO_HAS_OUT 1
#define PULSE_LENGTH_CH2_PIO_HAS_TRI 0
#define PULSE_LENGTH_CH2_PIO_IRQ_TYPE NONE
#define PULSE_LENGTH_CH2_PIO_RESET_VALUE 0

/*
 * Macros for device 'pulse_length_ch3_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PULSE_LENGTH_CH3_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PULSE_LENGTH_CH3_PIO_COMPONENT_TYPE altera_avalon_pio
#define PULSE_LENGTH_CH3_PIO_COMPONENT_NAME pulse_length_ch3_pio
#define PULSE_LENGTH_CH3_PIO_BASE 0x43000
#define PULSE_LENGTH_CH3_PIO_SPAN 16
#define PULSE_LENGTH_CH3_PIO_END 0x4300f
#define PULSE_LENGTH_CH3_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PULSE_LENGTH_CH3_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PULSE_LENGTH_CH3_PIO_CAPTURE 0
#define PULSE_LENGTH_CH3_PIO_DATA_WIDTH 32
#define PULSE_LENGTH_CH3_PIO_DO_TEST_BENCH_WIRING 0
#define PULSE_LENGTH_CH3_PIO_DRIVEN_SIM_VALUE 0
#define PULSE_LENGTH_CH3_PIO_EDGE_TYPE NONE
#define PULSE_LENGTH_CH3_PIO_FREQ 50000000
#define PULSE_LENGTH_CH3_PIO_HAS_IN 0
#define PULSE_LENGTH_CH3_PIO_HAS_OUT 1
#define PULSE_LENGTH_CH3_PIO_HAS_TRI 0
#define PULSE_LENGTH_CH3_PIO_IRQ_TYPE NONE
#define PULSE_LENGTH_CH3_PIO_RESET_VALUE 0

/*
 * Macros for device 'pulse_length_ch4_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PULSE_LENGTH_CH4_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PULSE_LENGTH_CH4_PIO_COMPONENT_TYPE altera_avalon_pio
#define PULSE_LENGTH_CH4_PIO_COMPONENT_NAME pulse_length_ch4_pio
#define PULSE_LENGTH_CH4_PIO_BASE 0x44000
#define PULSE_LENGTH_CH4_PIO_SPAN 16
#define PULSE_LENGTH_CH4_PIO_END 0x4400f
#define PULSE_LENGTH_CH4_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PULSE_LENGTH_CH4_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PULSE_LENGTH_CH4_PIO_CAPTURE 0
#define PULSE_LENGTH_CH4_PIO_DATA_WIDTH 32
#define PULSE_LENGTH_CH4_PIO_DO_TEST_BENCH_WIRING 0
#define PULSE_LENGTH_CH4_PIO_DRIVEN_SIM_VALUE 0
#define PULSE_LENGTH_CH4_PIO_EDGE_TYPE NONE
#define PULSE_LENGTH_CH4_PIO_FREQ 50000000
#define PULSE_LENGTH_CH4_PIO_HAS_IN 0
#define PULSE_LENGTH_CH4_PIO_HAS_OUT 1
#define PULSE_LENGTH_CH4_PIO_HAS_TRI 0
#define PULSE_LENGTH_CH4_PIO_IRQ_TYPE NONE
#define PULSE_LENGTH_CH4_PIO_RESET_VALUE 0

/*
 * Macros for device 'i2c_int', class 'altera_avalon_i2c'
 * The macros are prefixed with 'I2C_INT_'.
 * The prefix is the slave descriptor.
 */
#define I2C_INT_COMPONENT_TYPE altera_avalon_i2c
#define I2C_INT_COMPONENT_NAME i2c_int
#define I2C_INT_BASE 0x45000
#define I2C_INT_SPAN 64
#define I2C_INT_END 0x4503f
#define I2C_INT_IRQ 1
#define I2C_INT_FIFO_DEPTH 32
#define I2C_INT_FREQ 50000000
#define I2C_INT_USE_AV_ST 0

/*
 * Macros for device 'i2c_ext', class 'altera_avalon_i2c'
 * The macros are prefixed with 'I2C_EXT_'.
 * The prefix is the slave descriptor.
 */
#define I2C_EXT_COMPONENT_TYPE altera_avalon_i2c
#define I2C_EXT_COMPONENT_NAME i2c_ext
#define I2C_EXT_BASE 0x46000
#define I2C_EXT_SPAN 64
#define I2C_EXT_END 0x4603f
#define I2C_EXT_IRQ 0
#define I2C_EXT_FIFO_DEPTH 32
#define I2C_EXT_FREQ 50000000
#define I2C_EXT_USE_AV_ST 0

/*
 * Macros for device 'i2c_ext_1', class 'altera_avalon_i2c'
 * The macros are prefixed with 'I2C_EXT_1_'.
 * The prefix is the slave descriptor.
 */
#define I2C_EXT_1_COMPONENT_TYPE altera_avalon_i2c
#define I2C_EXT_1_COMPONENT_NAME i2c_ext_1
#define I2C_EXT_1_BASE 0x47000
#define I2C_EXT_1_SPAN 64
#define I2C_EXT_1_END 0x4703f
#define I2C_EXT_1_IRQ 2
#define I2C_EXT_1_FIFO_DEPTH 32
#define I2C_EXT_1_FREQ 50000000
#define I2C_EXT_1_USE_AV_ST 0


#endif /* _ALTERA_HPS_0_H_ */
